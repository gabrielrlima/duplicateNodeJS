import {
  MobileTimePicker
} from "./chunk-NHD62OIE.js";
import "./chunk-RBSFEZHG.js";
import {
  DesktopTimePicker
} from "./chunk-43N34NIH.js";
import "./chunk-FVD7CYT5.js";
import {
  TimePickerToolbar,
  timePickerToolbarClasses
} from "./chunk-V4W4MVSJ.js";
import "./chunk-4OQGGZGZ.js";
import "./chunk-OF73GIQR.js";
import "./chunk-7P4QPSQR.js";
import "./chunk-IMYNXWGV.js";
import {
  DEFAULT_DESKTOP_MODE_MEDIA_QUERY
} from "./chunk-SC7U3ORB.js";
import "./chunk-ZSGOA7PU.js";
import "./chunk-GVV4XI3D.js";
import "./chunk-QATJEQRD.js";
import "./chunk-YVXFHL7W.js";
import "./chunk-LG6YD673.js";
import "./chunk-TTAICKHP.js";
import "./chunk-C2FCUEFL.js";
import {
  useMediaQuery_default
} from "./chunk-EP3HBLAQ.js";
import "./chunk-TILE3WW5.js";
import "./chunk-URPLC4OD.js";
import "./chunk-IEWGGKFC.js";
import "./chunk-JB5QEITX.js";
import "./chunk-YDSAJJS3.js";
import "./chunk-4OH5GO7N.js";
import "./chunk-Q5QTAWGD.js";
import "./chunk-M26SMC3G.js";
import "./chunk-QEMOSYWR.js";
import "./chunk-A6DIOHJO.js";
import "./chunk-SFTWUXBM.js";
import "./chunk-PR7E2KUL.js";
import "./chunk-ZW6WLTJU.js";
import "./chunk-LFTAGM2U.js";
import "./chunk-VJ2JMID2.js";
import "./chunk-GWAUYOR6.js";
import "./chunk-DF2CYM5B.js";
import "./chunk-AOMECCXH.js";
import "./chunk-EEPX7UNS.js";
import "./chunk-JDVOU5DA.js";
import "./chunk-5ZNFG26Q.js";
import "./chunk-GLAA3FA6.js";
import "./chunk-DU5EZRYW.js";
import "./chunk-WFN3IR3O.js";
import "./chunk-YEQDTW3K.js";
import "./chunk-2BPJ3RYE.js";
import "./chunk-43RHYV2P.js";
import "./chunk-JNQVRWQY.js";
import "./chunk-4TPUG6ZM.js";
import "./chunk-4PBI7VQG.js";
import "./chunk-WAFS2Z2J.js";
import "./chunk-UYV4OOSM.js";
import "./chunk-254OMDNA.js";
import "./chunk-XSDUAQPF.js";
import "./chunk-XCYMLMRZ.js";
import "./chunk-3HPN5KNE.js";
import "./chunk-PR6ZCO7G.js";
import "./chunk-AKKANAVW.js";
import "./chunk-CIBSS3Q2.js";
import "./chunk-NBKRBOCP.js";
import "./chunk-LXIOCWSP.js";
import "./chunk-ZOKU5DI5.js";
import "./chunk-KQLNLOC4.js";
import "./chunk-T635I644.js";
import "./chunk-2ZTDWNVR.js";
import "./chunk-P3ULWOQK.js";
import "./chunk-HLBTSYN7.js";
import "./chunk-BCGMSBLU.js";
import "./chunk-P3XMSDBP.js";
import "./chunk-THPE6HM2.js";
import "./chunk-A7ZYR25G.js";
import "./chunk-AACZXOME.js";
import "./chunk-6F3VBANY.js";
import {
  useThemeProps
} from "./chunk-UGPHWRHX.js";
import {
  _objectWithoutPropertiesLoose
} from "./chunk-BFL632LT.js";
import "./chunk-E3ZF6YM2.js";
import "./chunk-56NJAI5N.js";
import "./chunk-SUNX3K6F.js";
import "./chunk-Y7QXPETG.js";
import "./chunk-TIP6WHAK.js";
import "./chunk-XXDMKUAV.js";
import "./chunk-KQEBN47O.js";
import "./chunk-AYIZBOSQ.js";
import "./chunk-SLCKX5TW.js";
import "./chunk-7RD63GDK.js";
import "./chunk-FBWAEBBC.js";
import "./chunk-Z36AX5XC.js";
import "./chunk-B5RSN6PF.js";
import "./chunk-FTRYWE2H.js";
import "./chunk-UDQDWZGQ.js";
import "./chunk-I2R5RPAV.js";
import "./chunk-KPU7LX4J.js";
import "./chunk-KHRYVRPR.js";
import "./chunk-GMF3KAU7.js";
import "./chunk-TWARF3XL.js";
import "./chunk-RNRWS6DF.js";
import "./chunk-AA5XXLR4.js";
import {
  require_jsx_runtime
} from "./chunk-IULEFUF5.js";
import {
  refType_default
} from "./chunk-M5VEBJZV.js";
import "./chunk-W5BO2KNX.js";
import {
  require_prop_types
} from "./chunk-SGWTPM65.js";
import "./chunk-T5TDCSU7.js";
import "./chunk-SMEBIHHK.js";
import {
  _extends
} from "./chunk-EQCCHGRT.js";
import "./chunk-5SN3YHXX.js";
import "./chunk-TPTFS77Q.js";
import "./chunk-L2P6ZJGI.js";
import {
  require_react
} from "./chunk-I773Y2XN.js";
import {
  __toESM
} from "./chunk-LK32TJAX.js";

// node_modules/@mui/x-date-pickers/TimePicker/TimePicker.js
var React = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());
var import_jsx_runtime = __toESM(require_jsx_runtime());
var _excluded = ["desktopModeMediaQuery"];
var TimePicker = React.forwardRef(function TimePicker2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "MuiTimePicker"
  });
  const {
    desktopModeMediaQuery = DEFAULT_DESKTOP_MODE_MEDIA_QUERY
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded);
  const isDesktop = useMediaQuery_default(desktopModeMediaQuery, {
    defaultMatches: true
  });
  if (isDesktop) {
    return (0, import_jsx_runtime.jsx)(DesktopTimePicker, _extends({
      ref
    }, other));
  }
  return (0, import_jsx_runtime.jsx)(MobileTimePicker, _extends({
    ref
  }, other));
});
true ? TimePicker.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * 12h/24h view for hour selection clock.
   * @default utils.is12HourCycleInCurrentLocale()
   */
  ampm: import_prop_types.default.bool,
  /**
   * Display ampm controls under the clock (instead of in the toolbar).
   * @default true on desktop, false on mobile
   */
  ampmInClock: import_prop_types.default.bool,
  /**
   * If `true`, the main element is focused during the first mount.
   * This main element is:
   * - the element chosen by the visible view if any (i.e: the selected day on the `day` view).
   * - the `input` element if there is a field rendered.
   */
  autoFocus: import_prop_types.default.bool,
  className: import_prop_types.default.string,
  /**
   * If `true`, the popover or modal will close after submitting the full date.
   * @default `true` for desktop, `false` for mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).
   */
  closeOnSelect: import_prop_types.default.bool,
  /**
   * The default value.
   * Used when the component is not controlled.
   */
  defaultValue: import_prop_types.default.object,
  /**
   * CSS media query when `Mobile` mode will be changed to `Desktop`.
   * @default '@media (pointer: fine)'
   * @example '@media (min-width: 720px)' or theme.breakpoints.up("sm")
   */
  desktopModeMediaQuery: import_prop_types.default.string,
  /**
   * If `true`, the picker and text field are disabled.
   * @default false
   */
  disabled: import_prop_types.default.bool,
  /**
   * If `true`, disable values after the current date for date components, time for time components and both for date time components.
   * @default false
   */
  disableFuture: import_prop_types.default.bool,
  /**
   * Do not ignore date part when validating min/max time.
   * @default false
   */
  disableIgnoringDatePartForTimeValidation: import_prop_types.default.bool,
  /**
   * If `true`, the open picker button will not be rendered (renders only the field).
   * @default false
   */
  disableOpenPicker: import_prop_types.default.bool,
  /**
   * If `true`, disable values before the current date for date components, time for time components and both for date time components.
   * @default false
   */
  disablePast: import_prop_types.default.bool,
  /**
   * @default false
   */
  enableAccessibleFieldDOMStructure: import_prop_types.default.any,
  /**
   * Format of the date when rendered in the input(s).
   * Defaults to localized format based on the used `views`.
   */
  format: import_prop_types.default.string,
  /**
   * Density of the format when rendered in the input.
   * Setting `formatDensity` to `"spacious"` will add a space before and after each `/`, `-` and `.` character.
   * @default "dense"
   */
  formatDensity: import_prop_types.default.oneOf(["dense", "spacious"]),
  /**
   * Pass a ref to the `input` element.
   */
  inputRef: refType_default,
  /**
   * The label content.
   */
  label: import_prop_types.default.node,
  /**
   * Locale for components texts.
   * Allows overriding texts coming from `LocalizationProvider` and `theme`.
   */
  localeText: import_prop_types.default.object,
  /**
   * Maximal selectable time.
   * The date part of the object will be ignored unless `props.disableIgnoringDatePartForTimeValidation === true`.
   */
  maxTime: import_prop_types.default.object,
  /**
   * Minimal selectable time.
   * The date part of the object will be ignored unless `props.disableIgnoringDatePartForTimeValidation === true`.
   */
  minTime: import_prop_types.default.object,
  /**
   * Step over minutes.
   * @default 1
   */
  minutesStep: import_prop_types.default.number,
  /**
   * Name attribute used by the `input` element in the Field.
   */
  name: import_prop_types.default.string,
  /**
   * Callback fired when the value is accepted.
   * @template TValue The value type. It will be the same type as `value` or `null`. It can be in `[start, end]` format in case of range value.
   * @template TError The validation error type. It will be either `string` or a `null`. It can be in `[start, end]` format in case of range value.
   * @param {TValue} value The value that was just accepted.
   * @param {FieldChangeHandlerContext<TError>} context The context containing the validation result of the current value.
   */
  onAccept: import_prop_types.default.func,
  /**
   * Callback fired when the value changes.
   * @template TValue The value type. It will be the same type as `value` or `null`. It can be in `[start, end]` format in case of range value.
   * @template TError The validation error type. It will be either `string` or a `null`. It can be in `[start, end]` format in case of range value.
   * @param {TValue} value The new value.
   * @param {FieldChangeHandlerContext<TError>} context The context containing the validation result of the current value.
   */
  onChange: import_prop_types.default.func,
  /**
   * Callback fired when the popup requests to be closed.
   * Use in controlled mode (see `open`).
   */
  onClose: import_prop_types.default.func,
  /**
   * Callback fired when the error associated with the current value changes.
   * When a validation error is detected, the `error` parameter contains a non-null value.
   * This can be used to render an appropriate form error.
   * @template TError The validation error type. It will be either `string` or a `null`. It can be in `[start, end]` format in case of range value.
   * @template TValue The value type. It will be the same type as `value` or `null`. It can be in `[start, end]` format in case of range value.
   * @param {TError} error The reason why the current value is not valid.
   * @param {TValue} value The value associated with the error.
   */
  onError: import_prop_types.default.func,
  /**
   * Callback fired when the popup requests to be opened.
   * Use in controlled mode (see `open`).
   */
  onOpen: import_prop_types.default.func,
  /**
   * Callback fired when the selected sections change.
   * @param {FieldSelectedSections} newValue The new selected sections.
   */
  onSelectedSectionsChange: import_prop_types.default.func,
  /**
   * Callback fired on view change.
   * @template TView
   * @param {TView} view The new view.
   */
  onViewChange: import_prop_types.default.func,
  /**
   * Control the popup or dialog open state.
   * @default false
   */
  open: import_prop_types.default.bool,
  /**
   * The default visible view.
   * Used when the component view is not controlled.
   * Must be a valid option from `views` list.
   */
  openTo: import_prop_types.default.oneOf(["hours", "meridiem", "minutes", "seconds"]),
  /**
   * Force rendering in particular orientation.
   */
  orientation: import_prop_types.default.oneOf(["landscape", "portrait"]),
  readOnly: import_prop_types.default.bool,
  /**
   * If `true`, disable heavy animations.
   * @default `@media(prefers-reduced-motion: reduce)` || `navigator.userAgent` matches Android <10 or iOS <13
   */
  reduceAnimations: import_prop_types.default.bool,
  /**
   * The date used to generate the new value when both `value` and `defaultValue` are empty.
   * @default The closest valid date-time using the validation props, except callbacks like `shouldDisable<...>`.
   */
  referenceDate: import_prop_types.default.object,
  /**
   * The currently selected sections.
   * This prop accepts four formats:
   * 1. If a number is provided, the section at this index will be selected.
   * 2. If a string of type `FieldSectionType` is provided, the first section with that name will be selected.
   * 3. If `"all"` is provided, all the sections will be selected.
   * 4. If `null` is provided, no section will be selected.
   * If not provided, the selected sections will be handled internally.
   */
  selectedSections: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["all", "day", "empty", "hours", "meridiem", "minutes", "month", "seconds", "weekDay", "year"]), import_prop_types.default.number]),
  /**
   * Disable specific time.
   * @template TDate
   * @param {TDate} value The value to check.
   * @param {TimeView} view The clock type of the timeValue.
   * @returns {boolean} If `true` the time will be disabled.
   */
  shouldDisableTime: import_prop_types.default.func,
  /**
   * If `true`, disabled digital clock items will not be rendered.
   * @default false
   */
  skipDisabled: import_prop_types.default.bool,
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: import_prop_types.default.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: import_prop_types.default.object,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types.default.oneOfType([import_prop_types.default.arrayOf(import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object, import_prop_types.default.bool])), import_prop_types.default.func, import_prop_types.default.object]),
  /**
   * Amount of time options below or at which the single column time renderer is used.
   * @default 24
   */
  thresholdToRenderTimeInASingleColumn: import_prop_types.default.number,
  /**
   * The time steps between two time unit options.
   * For example, if `timeStep.minutes = 8`, then the available minute options will be `[0, 8, 16, 24, 32, 40, 48, 56]`.
   * When single column time renderer is used, only `timeStep.minutes` will be used.
   * @default{ hours: 1, minutes: 5, seconds: 5 }
   */
  timeSteps: import_prop_types.default.shape({
    hours: import_prop_types.default.number,
    minutes: import_prop_types.default.number,
    seconds: import_prop_types.default.number
  }),
  /**
   * Choose which timezone to use for the value.
   * Example: "default", "system", "UTC", "America/New_York".
   * If you pass values from other timezones to some props, they will be converted to this timezone before being used.
   * @see See the {@link https://mui.com/x/react-date-pickers/timezone/ timezones documentation} for more details.
   * @default The timezone of the `value` or `defaultValue` prop is defined, 'default' otherwise.
   */
  timezone: import_prop_types.default.string,
  /**
   * The selected value.
   * Used when the component is controlled.
   */
  value: import_prop_types.default.object,
  /**
   * The visible view.
   * Used when the component view is controlled.
   * Must be a valid option from `views` list.
   */
  view: import_prop_types.default.oneOf(["hours", "meridiem", "minutes", "seconds"]),
  /**
   * Define custom view renderers for each section.
   * If `null`, the section will only have field editing.
   * If `undefined`, internally defined view will be used.
   */
  viewRenderers: import_prop_types.default.shape({
    hours: import_prop_types.default.func,
    meridiem: import_prop_types.default.func,
    minutes: import_prop_types.default.func,
    seconds: import_prop_types.default.func
  }),
  /**
   * Available views.
   */
  views: import_prop_types.default.arrayOf(import_prop_types.default.oneOf(["hours", "minutes", "seconds"]).isRequired)
} : void 0;
export {
  TimePicker,
  TimePickerToolbar,
  timePickerToolbarClasses
};
//# sourceMappingURL=@mui_x-date-pickers_TimePicker.js.map
