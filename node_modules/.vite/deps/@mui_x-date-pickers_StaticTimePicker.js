import {
  useStaticPicker
} from "./chunk-2NZOCMUL.js";
import {
  useTimePickerDefaultizedProps
} from "./chunk-3KNQFVAC.js";
import {
  renderTimeViewClock
} from "./chunk-WMCI4XZM.js";
import "./chunk-VY3UM2ZM.js";
import {
  singleItemValueManager,
  validateTime
} from "./chunk-AF3SLUEO.js";
import "./chunk-IAA4LPB2.js";
import "./chunk-WE3QFS7Z.js";
import "./chunk-RSA2NM73.js";
import "./chunk-MIWKBJ7Q.js";
import "./chunk-G3RW23Z7.js";
import "./chunk-TKOSUKCE.js";
import "./chunk-OMUU2FCJ.js";
import "./chunk-JI65H4BN.js";
import "./chunk-PBZYE5QF.js";
import "./chunk-VOAXAVN3.js";
import "./chunk-3VBPPWZG.js";
import "./chunk-5VZGNY2C.js";
import "./chunk-IOFL6OWJ.js";
import "./chunk-57LTXC4B.js";
import "./chunk-K2YCOIEK.js";
import "./chunk-YEMDVBLQ.js";
import "./chunk-4T6ZNOM5.js";
import "./chunk-KWU4BQIF.js";
import "./chunk-PYQKAOIT.js";
import "./chunk-R5XTTWZA.js";
import "./chunk-VKXIEPDC.js";
import "./chunk-USPXSWFJ.js";
import "./chunk-J25L3RCI.js";
import "./chunk-MVQFUBPF.js";
import "./chunk-JDLR5PFU.js";
import "./chunk-VQ2N42GB.js";
import "./chunk-37QURFJT.js";
import "./chunk-DJXDFJWR.js";
import "./chunk-DN5EVASD.js";
import "./chunk-3VGFL6UM.js";
import "./chunk-2I3FFUOF.js";
import "./chunk-HSZGTZDO.js";
import "./chunk-54QXNFUY.js";
import "./chunk-O3BU35E7.js";
import "./chunk-DPAVJUTA.js";
import "./chunk-7A5Z7LG7.js";
import "./chunk-2OYFVCDD.js";
import "./chunk-MYED2FWN.js";
import "./chunk-FT7ZROUJ.js";
import "./chunk-NLVCAXOY.js";
import "./chunk-2WME5RNB.js";
import "./chunk-4LEXQQ4C.js";
import "./chunk-XZJXBIZG.js";
import "./chunk-WROCM2Q2.js";
import "./chunk-2NDJNVK2.js";
import "./chunk-3LPNEN4Y.js";
import "./chunk-HR6VZA63.js";
import "./chunk-PH57EN3S.js";
import "./chunk-XOBM2IYA.js";
import "./chunk-5YZ4N5JP.js";
import "./chunk-K5EQ56SN.js";
import "./chunk-RNYN6WPJ.js";
import "./chunk-TMPZZT6Z.js";
import "./chunk-EM7HWY4Y.js";
import "./chunk-TD4IUV5I.js";
import "./chunk-Y7XITPRB.js";
import {
  require_prop_types
} from "./chunk-MVBLUKDZ.js";
import "./chunk-GYGRNMHX.js";
import "./chunk-4UCMBOLF.js";
import {
  _extends
} from "./chunk-IDFSQLBH.js";
import "./chunk-KCD7PEB5.js";
import "./chunk-CLOXY5HG.js";
import "./chunk-YUUZGYL5.js";
import "./chunk-LPEJYT6W.js";
import {
  require_react
} from "./chunk-KBP2TVUK.js";
import {
  __toESM
} from "./chunk-LK32TJAX.js";

// node_modules/.pnpm/@mui+x-date-pickers@7.29.4_@emotion+react@11.14.0_@types+react@18.3.23_react@18.3.1__@e_a628d33de7b3f16b47fdcf6cc0ada62b/node_modules/@mui/x-date-pickers/StaticTimePicker/StaticTimePicker.js
var React = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());
var StaticTimePicker = React.forwardRef(function StaticTimePicker2(inProps, ref) {
  var _a;
  const defaultizedProps = useTimePickerDefaultizedProps(inProps, "MuiStaticTimePicker");
  const displayStaticWrapperAs = defaultizedProps.displayStaticWrapperAs ?? "mobile";
  const ampmInClock = defaultizedProps.ampmInClock ?? displayStaticWrapperAs === "desktop";
  const viewRenderers = _extends({
    hours: renderTimeViewClock,
    minutes: renderTimeViewClock,
    seconds: renderTimeViewClock
  }, defaultizedProps.viewRenderers);
  const props = _extends({}, defaultizedProps, {
    viewRenderers,
    displayStaticWrapperAs,
    ampmInClock,
    slotProps: _extends({}, defaultizedProps.slotProps, {
      toolbar: _extends({
        hidden: displayStaticWrapperAs === "desktop",
        ampmInClock
      }, (_a = defaultizedProps.slotProps) == null ? void 0 : _a.toolbar)
    })
  });
  const {
    renderPicker
  } = useStaticPicker({
    props,
    valueManager: singleItemValueManager,
    valueType: "time",
    validator: validateTime,
    ref
  });
  return renderPicker();
});
StaticTimePicker.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * 12h/24h view for hour selection clock.
   * @default utils.is12HourCycleInCurrentLocale()
   */
  ampm: import_prop_types.default.bool,
  /**
   * Display ampm controls under the clock (instead of in the toolbar).
   * @default true on desktop, false on mobile
   */
  ampmInClock: import_prop_types.default.bool,
  /**
   * If `true`, the main element is focused during the first mount.
   * This main element is:
   * - the element chosen by the visible view if any (i.e: the selected day on the `day` view).
   * - the `input` element if there is a field rendered.
   */
  autoFocus: import_prop_types.default.bool,
  className: import_prop_types.default.string,
  /**
   * The default value.
   * Used when the component is not controlled.
   */
  defaultValue: import_prop_types.default.object,
  /**
   * If `true`, the picker and text field are disabled.
   * @default false
   */
  disabled: import_prop_types.default.bool,
  /**
   * If `true`, disable values after the current date for date components, time for time components and both for date time components.
   * @default false
   */
  disableFuture: import_prop_types.default.bool,
  /**
   * Do not ignore date part when validating min/max time.
   * @default false
   */
  disableIgnoringDatePartForTimeValidation: import_prop_types.default.bool,
  /**
   * If `true`, disable values before the current date for date components, time for time components and both for date time components.
   * @default false
   */
  disablePast: import_prop_types.default.bool,
  /**
   * Force static wrapper inner components to be rendered in mobile or desktop mode.
   * @default "mobile"
   */
  displayStaticWrapperAs: import_prop_types.default.oneOf(["desktop", "mobile"]),
  /**
   * Locale for components texts.
   * Allows overriding texts coming from `LocalizationProvider` and `theme`.
   */
  localeText: import_prop_types.default.object,
  /**
   * Maximal selectable time.
   * The date part of the object will be ignored unless `props.disableIgnoringDatePartForTimeValidation === true`.
   */
  maxTime: import_prop_types.default.object,
  /**
   * Minimal selectable time.
   * The date part of the object will be ignored unless `props.disableIgnoringDatePartForTimeValidation === true`.
   */
  minTime: import_prop_types.default.object,
  /**
   * Step over minutes.
   * @default 1
   */
  minutesStep: import_prop_types.default.number,
  /**
   * Callback fired when the value is accepted.
   * @template TValue The value type. It will be the same type as `value` or `null`. It can be in `[start, end]` format in case of range value.
   * @template TError The validation error type. It will be either `string` or a `null`. It can be in `[start, end]` format in case of range value.
   * @param {TValue} value The value that was just accepted.
   * @param {FieldChangeHandlerContext<TError>} context The context containing the validation result of the current value.
   */
  onAccept: import_prop_types.default.func,
  /**
   * Callback fired when the value changes.
   * @template TValue The value type. It will be the same type as `value` or `null`. It can be in `[start, end]` format in case of range value.
   * @template TError The validation error type. It will be either `string` or a `null`. It can be in `[start, end]` format in case of range value.
   * @param {TValue} value The new value.
   * @param {FieldChangeHandlerContext<TError>} context The context containing the validation result of the current value.
   */
  onChange: import_prop_types.default.func,
  /**
   * Callback fired when component requests to be closed.
   * Can be fired when selecting (by default on `desktop` mode) or clearing a value.
   * @deprecated Please avoid using as it will be removed in next major version.
   */
  onClose: import_prop_types.default.func,
  /**
   * Callback fired when the error associated with the current value changes.
   * When a validation error is detected, the `error` parameter contains a non-null value.
   * This can be used to render an appropriate form error.
   * @template TError The validation error type. It will be either `string` or a `null`. It can be in `[start, end]` format in case of range value.
   * @template TValue The value type. It will be the same type as `value` or `null`. It can be in `[start, end]` format in case of range value.
   * @param {TError} error The reason why the current value is not valid.
   * @param {TValue} value The value associated with the error.
   */
  onError: import_prop_types.default.func,
  /**
   * Callback fired on view change.
   * @template TView
   * @param {TView} view The new view.
   */
  onViewChange: import_prop_types.default.func,
  /**
   * The default visible view.
   * Used when the component view is not controlled.
   * Must be a valid option from `views` list.
   */
  openTo: import_prop_types.default.oneOf(["hours", "minutes", "seconds"]),
  /**
   * Force rendering in particular orientation.
   */
  orientation: import_prop_types.default.oneOf(["landscape", "portrait"]),
  readOnly: import_prop_types.default.bool,
  /**
   * If `true`, disable heavy animations.
   * @default `@media(prefers-reduced-motion: reduce)` || `navigator.userAgent` matches Android <10 or iOS <13
   */
  reduceAnimations: import_prop_types.default.bool,
  /**
   * The date used to generate the new value when both `value` and `defaultValue` are empty.
   * @default The closest valid date-time using the validation props, except callbacks like `shouldDisable<...>`.
   */
  referenceDate: import_prop_types.default.object,
  /**
   * Disable specific time.
   * @template TDate
   * @param {TDate} value The value to check.
   * @param {TimeView} view The clock type of the timeValue.
   * @returns {boolean} If `true` the time will be disabled.
   */
  shouldDisableTime: import_prop_types.default.func,
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: import_prop_types.default.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: import_prop_types.default.object,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types.default.oneOfType([import_prop_types.default.arrayOf(import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object, import_prop_types.default.bool])), import_prop_types.default.func, import_prop_types.default.object]),
  /**
   * Choose which timezone to use for the value.
   * Example: "default", "system", "UTC", "America/New_York".
   * If you pass values from other timezones to some props, they will be converted to this timezone before being used.
   * @see See the {@link https://mui.com/x/react-date-pickers/timezone/ timezones documentation} for more details.
   * @default The timezone of the `value` or `defaultValue` prop is defined, 'default' otherwise.
   */
  timezone: import_prop_types.default.string,
  /**
   * The selected value.
   * Used when the component is controlled.
   */
  value: import_prop_types.default.object,
  /**
   * The visible view.
   * Used when the component view is controlled.
   * Must be a valid option from `views` list.
   */
  view: import_prop_types.default.oneOf(["hours", "minutes", "seconds"]),
  /**
   * Define custom view renderers for each section.
   * If `null`, the section will only have field editing.
   * If `undefined`, internally defined view will be used.
   */
  viewRenderers: import_prop_types.default.shape({
    hours: import_prop_types.default.func,
    minutes: import_prop_types.default.func,
    seconds: import_prop_types.default.func
  }),
  /**
   * Available views.
   */
  views: import_prop_types.default.arrayOf(import_prop_types.default.oneOf(["hours", "minutes", "seconds"]).isRequired)
};
export {
  StaticTimePicker
};
//# sourceMappingURL=@mui_x-date-pickers_StaticTimePicker.js.map
