{
  "version": 3,
  "sources": ["../../embla-carousel-auto-height/src/components/AutoHeight.ts"],
  "sourcesContent": ["import { OptionsType } from './Options'\nimport {\n  EmblaEventType,\n  CreatePluginType,\n  EmblaCarouselType\n} from 'embla-carousel'\n\ndeclare module 'embla-carousel' {\n  interface EmblaPluginsType {\n    autoHeight: AutoHeightType\n  }\n}\n\nexport type AutoHeightType = CreatePluginType<{}, OptionsType>\n\nexport type AutoHeightOptionsType = AutoHeightType['options']\n\nfunction AutoHeight(userOptions: AutoHeightOptionsType = {}): AutoHeightType {\n  let emblaApi: EmblaCarouselType\n  let slideHeights: number[] = []\n  const heightEvents: EmblaEventType[] = ['select', 'slideFocus']\n\n  function init(emblaApiInstance: EmblaCarouselType): void {\n    emblaApi = emblaApiInstance\n\n    const {\n      options: { axis },\n      slideRects\n    } = emblaApi.internalEngine()\n\n    if (axis === 'y') return\n\n    slideHeights = slideRects.map((slideRect) => slideRect.height)\n\n    heightEvents.forEach((evt) => emblaApi.on(evt, setContainerHeight))\n    setContainerHeight()\n  }\n\n  function destroy(): void {\n    heightEvents.forEach((evt) => emblaApi.off(evt, setContainerHeight))\n    const container = emblaApi.containerNode()\n    container.style.height = ''\n    if (!container.getAttribute('style')) container.removeAttribute('style')\n  }\n\n  function highestInView(): number | null {\n    const { slideRegistry } = emblaApi.internalEngine()\n    const selectedIndexes = slideRegistry[emblaApi.selectedScrollSnap()]\n\n    if (!selectedIndexes) return null\n\n    return selectedIndexes\n      .map((index) => slideHeights[index])\n      .reduce((a, b) => Math.max(a, b), 0)\n  }\n\n  function setContainerHeight(): void {\n    const height = highestInView()\n    if (height === null) return\n\n    emblaApi.containerNode().style.height = `${highestInView()}px`\n  }\n\n  const self: AutoHeightType = {\n    name: 'autoHeight',\n    options: userOptions,\n    init,\n    destroy\n  }\n  return self\n}\n\ndeclare namespace AutoHeight {\n  let globalOptions: AutoHeightOptionsType | undefined\n}\n\nAutoHeight.globalOptions = undefined\n\nexport default AutoHeight\n"],
  "mappings": ";;;AAiBA,SAASA,WAAWC,cAAqC,CAAA,GAAE;AACzD,MAAIC;AACJ,MAAIC,eAAyB,CAAA;AAC7B,QAAMC,eAAiC,CAAC,UAAU,YAAY;AAE9D,WAASC,KAAKC,kBAAmC;AAC/CJ,eAAWI;AAEX,UAAM;MACJC,SAAS;QAAEC;;MACXC;IAAU,IACRP,SAASQ,eAAc;AAE3B,QAAIF,SAAS,IAAK;AAElBL,mBAAeM,WAAWE,IAAKC,eAAcA,UAAUC,MAAM;AAE7DT,iBAAaU,QAASC,SAAQb,SAASc,GAAGD,KAAKE,kBAAkB,CAAC;AAClEA,uBAAkB;EACpB;AAEA,WAASC,UAAO;AACdd,iBAAaU,QAASC,SAAQb,SAASiB,IAAIJ,KAAKE,kBAAkB,CAAC;AACnE,UAAMG,YAAYlB,SAASmB,cAAa;AACxCD,cAAUE,MAAMT,SAAS;AACzB,QAAI,CAACO,UAAUG,aAAa,OAAO,EAAGH,WAAUI,gBAAgB,OAAO;EACzE;AAEA,WAASC,gBAAa;AACpB,UAAM;MAAEC;IAAe,IAAGxB,SAASQ,eAAc;AACjD,UAAMiB,kBAAkBD,cAAcxB,SAAS0B,mBAAkB,CAAE;AAEnE,QAAI,CAACD,gBAAiB,QAAO;AAE7B,WAAOA,gBACJhB,IAAKkB,WAAU1B,aAAa0B,KAAK,CAAC,EAClCC,OAAO,CAACC,GAAGC,MAAMC,KAAKC,IAAIH,GAAGC,CAAC,GAAG,CAAC;EACvC;AAEA,WAASf,qBAAkB;AACzB,UAAMJ,SAASY,cAAa;AAC5B,QAAIZ,WAAW,KAAM;AAErBX,aAASmB,cAAa,EAAGC,MAAMT,SAAS,GAAGY,cAAa,CAAE;EAC5D;AAEA,QAAMU,OAAuB;IAC3BC,MAAM;IACN7B,SAASN;IACTI;IACAa;;AAEF,SAAOiB;AACT;AAMAnC,WAAWqC,gBAAgBC;",
  "names": ["AutoHeight", "userOptions", "emblaApi", "slideHeights", "heightEvents", "init", "emblaApiInstance", "options", "axis", "slideRects", "internalEngine", "map", "slideRect", "height", "forEach", "evt", "on", "setContainerHeight", "destroy", "off", "container", "containerNode", "style", "getAttribute", "removeAttribute", "highestInView", "slideRegistry", "selectedIndexes", "selectedScrollSnap", "index", "reduce", "a", "b", "Math", "max", "self", "name", "globalOptions", "undefined"]
}
