{
  "version": 3,
  "sources": ["../../.pnpm/@mui+utils@7.3.1_@types+react@18.3.23_react@18.3.1/node_modules/@mui/utils/esm/ownerDocument/ownerDocument.js", "../../.pnpm/@mui+utils@7.3.1_@types+react@18.3.23_react@18.3.1/node_modules/@mui/utils/esm/useEnhancedEffect/useEnhancedEffect.js", "../../.pnpm/@mui+utils@7.3.1_@types+react@18.3.23_react@18.3.1/node_modules/@mui/utils/esm/useEventCallback/useEventCallback.js"],
  "sourcesContent": ["export default function ownerDocument(node) {\n  return node && node.ownerDocument || document;\n}", "'use client';\n\nimport * as React from 'react';\n\n/**\n * A version of `React.useLayoutEffect` that does not show a warning when server-side rendering.\n * This is useful for effects that are only needed for client-side rendering but not for SSR.\n *\n * Before you use this hook, make sure to read https://gist.github.com/gaearon/e7d97cdf38a2907924ea12e4ebdf3c85\n * and confirm it doesn't apply to your use-case.\n */\nconst useEnhancedEffect = typeof window !== 'undefined' ? React.useLayoutEffect : React.useEffect;\nexport default useEnhancedEffect;", "'use client';\n\nimport * as React from 'react';\nimport useEnhancedEffect from \"../useEnhancedEffect/index.js\";\n\n/**\n * Inspired by https://github.com/facebook/react/issues/14099#issuecomment-440013892\n * See RFC in https://github.com/reactjs/rfcs/pull/220\n */\n\nfunction useEventCallback(fn) {\n  const ref = React.useRef(fn);\n  useEnhancedEffect(() => {\n    ref.current = fn;\n  });\n  return React.useRef((...args) =>\n  // @ts-expect-error hide `this`\n  (0, ref.current)(...args)).current;\n}\nexport default useEventCallback;"],
  "mappings": ";;;;;;;;AAAe,SAAR,cAA+B,MAAM;AAC1C,SAAO,QAAQ,KAAK,iBAAiB;AACvC;;;ACAA,YAAuB;AASvB,IAAM,oBAAoB,OAAO,WAAW,cAAoB,wBAAwB;AACxF,IAAO,4BAAQ;;;ACVf,IAAAA,SAAuB;AAQvB,SAAS,iBAAiB,IAAI;AAC5B,QAAM,MAAY,cAAO,EAAE;AAC3B,4BAAkB,MAAM;AACtB,QAAI,UAAU;AAAA,EAChB,CAAC;AACD,SAAa,cAAO,IAAI;AAAA;AAAA,KAEvB,GAAG,IAAI,SAAS,GAAG,IAAI;AAAA,GAAC,EAAE;AAC7B;AACA,IAAO,2BAAQ;",
  "names": ["React"]
}
