const axios = require('axios');

// Configura√ß√£o da API
const API_BASE_URL = 'http://localhost:3001/api';
const FRONTEND_URL = 'http://localhost:8081';

// ID do produto problem√°tico
const PROBLEMATIC_PRODUCT_ID = '68c5d2da346a055c4bd815ba';
const REAL_ESTATE_ID = '68c4467199df1835267f3e48';

// Fun√ß√£o para fazer login e obter token
async function login() {
  try {
    console.log('üîê Fazendo login...');
    const response = await axios.post(`${API_BASE_URL}/auth/login`, {
      email: 'gabriel@teste.com',
      password: '123456'
    });
    
    if (response.data.success) {
      console.log('‚úÖ Login realizado com sucesso');
      return response.data.data.token;
    } else {
      throw new Error('Falha no login: ' + response.data.message);
    }
  } catch (error) {
    console.error('‚ùå Erro no login:', error.response?.data || error.message);
    throw error;
  }
}

// Fun√ß√£o para buscar dados do produto
async function getProduct(token, productId) {
  try {
    console.log(`üîç Buscando produto ${productId}...`);
    const response = await axios.get(`${API_BASE_URL}/products/${productId}`, {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });
    
    if (response.data.success) {
      console.log('‚úÖ Produto encontrado:', response.data.data.title);
      return response.data.data;
    } else {
      throw new Error('Produto n√£o encontrado: ' + response.data.message);
    }
  } catch (error) {
    console.error('‚ùå Erro ao buscar produto:', error.response?.data || error.message);
    throw error;
  }
}

// Fun√ß√£o para testar atualiza√ß√£o com dados m√≠nimos
async function testMinimalUpdate(token, productId, originalData) {
  try {
    console.log('\nüß™ TESTE 1: Atualiza√ß√£o com dados m√≠nimos');
    
    const minimalData = {
      name: originalData.title || originalData.name || 'Teste Empreendimento',
      title: originalData.title || 'Teste Empreendimento',
      description: originalData.description || 'Descri√ß√£o teste',
      type: 'empreendimento',
      area: 100, // Campo obrigat√≥rio
      value: 0, // Campo obrigat√≥rio
      address: {
        street: 'Rua Teste',
        number: '123',
        complement: '',
        neighborhood: 'Bairro Teste',
        city: 'Cidade Teste',
        state: 'SP',
        zipCode: '12345-678',
        country: 'Brasil'
      },
      construtora: 'Construtora Teste',
      previsaoEntrega: new Date().toISOString(),
      unidadesDisponiveis: 10,
      plantas: []
    };
    
    console.log('üì§ Enviando dados m√≠nimos:', JSON.stringify(minimalData, null, 2));
    
    const response = await axios.put(`${API_BASE_URL}/products/${productId}`, minimalData, {
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });
    
    if (response.data.success) {
      console.log('‚úÖ TESTE 1 PASSOU: Atualiza√ß√£o com dados m√≠nimos funcionou!');
      return true;
    } else {
      console.log('‚ùå TESTE 1 FALHOU:', response.data.message);
      return false;
    }
  } catch (error) {
    console.error('‚ùå TESTE 1 ERRO:', {
      status: error.response?.status,
      message: error.response?.data?.message,
      details: error.response?.data
    });
    return false;
  }
}

// Fun√ß√£o para testar atualiza√ß√£o com dados originais
async function testOriginalDataUpdate(token, productId, originalData) {
  try {
    console.log('\nüß™ TESTE 2: Atualiza√ß√£o com dados originais');
    
    // Simular o mapeamento que o frontend faz - seguindo o schema do backend
    const mappedData = {
      name: originalData.title || originalData.name || 'Produto Teste',
      title: originalData.title,
      description: originalData.description,
      type: originalData.type,
      area: Number(originalData.area) || 100, // Campo obrigat√≥rio no backend
      value: Number(originalData.value) || 0, // Campo obrigat√≥rio no backend
      address: {
        street: originalData.address?.street || 'Rua Teste',
        number: originalData.address?.number || '123',
        complement: originalData.address?.complement || '',
        neighborhood: originalData.address?.neighborhood || 'Bairro Teste',
        city: originalData.address?.city || 'Cidade Teste',
        state: originalData.address?.state || 'SP',
        zipCode: originalData.address?.zipCode || '12345-678',
        country: 'Brasil'
      },
      construtora: originalData.construtora || '',
      previsaoEntrega: originalData.previsaoEntrega || new Date().toISOString(),
      unidadesDisponiveis: Number(originalData.unidadesDisponiveis) || 0,
      plantas: originalData.plantas || []
    };
    
    console.log('üì§ Enviando dados originais mapeados:', JSON.stringify(mappedData, null, 2));
    
    const response = await axios.put(`${API_BASE_URL}/products/${productId}`, mappedData, {
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });
    
    if (response.data.success) {
      console.log('‚úÖ TESTE 2 PASSOU: Atualiza√ß√£o com dados originais funcionou!');
      return true;
    } else {
      console.log('‚ùå TESTE 2 FALHOU:', response.data.message);
      return false;
    }
  } catch (error) {
    console.error('‚ùå TESTE 2 ERRO:', {
      status: error.response?.status,
      message: error.response?.data?.message,
      details: error.response?.data
    });
    return false;
  }
}

// Fun√ß√£o para testar campos problem√°ticos
async function testProblematicFields(token, productId) {
  try {
    console.log('\nüß™ TESTE 3: Campos problem√°ticos (NaN, null, undefined)');
    
    const problematicData = {
      name: 'Teste Campos Problem√°ticos', // Campo obrigat√≥rio
      title: 'Teste Campos Problem√°ticos',
      description: 'Teste com campos inv√°lidos',
      type: 'empreendimento',
      area: 100, // Campo obrigat√≥rio
      value: 0, // Campo obrigat√≥rio
      address: {
        street: 'Rua Teste',
        number: '123',
        complement: '',
        neighborhood: 'Bairro Teste',
        city: 'Cidade Teste',
        state: 'SP',
        zipCode: '12345-678',
        country: 'Brasil'
      },
      construtora: null, // Campo problem√°tico
      previsaoEntrega: undefined, // Campo problem√°tico
      unidadesDisponiveis: NaN, // Campo problem√°tico
      plantas: null // Campo problem√°tico
    };
    
    console.log('üì§ Enviando dados problem√°ticos:', JSON.stringify(problematicData, null, 2));
    
    const response = await axios.put(`${API_BASE_URL}/products/${productId}`, problematicData, {
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });
    
    if (response.data.success) {
      console.log('‚úÖ TESTE 3 PASSOU: Backend lidou bem com campos problem√°ticos!');
      return true;
    } else {
      console.log('‚ùå TESTE 3 FALHOU:', response.data.message);
      return false;
    }
  } catch (error) {
    console.error('‚ùå TESTE 3 ERRO:', {
      status: error.response?.status,
      message: error.response?.data?.message,
      details: error.response?.data
    });
    return false;
  }
}

// Fun√ß√£o principal
async function main() {
  try {
    console.log('üöÄ INICIANDO TESTE DO PRODUTO PROBLEM√ÅTICO');
    console.log('=' .repeat(60));
    
    // 1. Fazer login
    const token = await login();
    
    // 2. Buscar dados do produto
    const originalData = await getProduct(token, PROBLEMATIC_PRODUCT_ID);
    
    console.log('\nüìã DADOS ORIGINAIS DO PRODUTO:');
    console.log('   - ID:', originalData._id);
    console.log('   - T√≠tulo:', originalData.title);
    console.log('   - Tipo:', originalData.type);
    console.log('   - Construtora:', originalData.construtora);
    console.log('   - Previs√£o Entrega:', originalData.previsaoEntrega);
    console.log('   - Unidades Dispon√≠veis:', originalData.unidadesDisponiveis);
    console.log('   - Plantas:', originalData.plantas?.length || 0, 'itens');
    console.log('   - Endere√ßo:', originalData.address);
    
    // 3. Executar testes
    const results = {
      minimalUpdate: await testMinimalUpdate(token, PROBLEMATIC_PRODUCT_ID, originalData),
      originalDataUpdate: await testOriginalDataUpdate(token, PROBLEMATIC_PRODUCT_ID, originalData),
      problematicFields: await testProblematicFields(token, PROBLEMATIC_PRODUCT_ID)
    };
    
    // 4. Resumo dos resultados
    console.log('\n' + '=' .repeat(60));
    console.log('üìä RESUMO DOS TESTES:');
    console.log('   - Dados m√≠nimos:', results.minimalUpdate ? '‚úÖ PASSOU' : '‚ùå FALHOU');
    console.log('   - Dados originais:', results.originalDataUpdate ? '‚úÖ PASSOU' : '‚ùå FALHOU');
    console.log('   - Campos problem√°ticos:', results.problematicFields ? '‚úÖ PASSOU' : '‚ùå FALHOU');
    
    const passedTests = Object.values(results).filter(Boolean).length;
    const totalTests = Object.keys(results).length;
    
    console.log(`\nüéØ RESULTADO FINAL: ${passedTests}/${totalTests} testes passaram`);
    
    if (passedTests === totalTests) {
      console.log('üéâ TODOS OS TESTES PASSARAM! O problema foi resolvido.');
    } else {
      console.log('‚ö†Ô∏è  Alguns testes falharam. Investiga√ß√£o adicional necess√°ria.');
    }
    
  } catch (error) {
    console.error('üí• ERRO GERAL:', error.message);
    process.exit(1);
  }
}

// Executar o teste
if (require.main === module) {
  main();
}

module.exports = { main, login, getProduct, testMinimalUpdate, testOriginalDataUpdate, testProblematicFields };