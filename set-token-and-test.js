// Script para definir token e testar funcionalidade de edi√ß√£o

// Token JWT v√°lido gerado
const validToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3NmExMjM0NTY3ODkwYWJjZGVmMTIzNCIsImVtYWlsIjoidGVzdGVAZXhlbXBsby5jb20iLCJmaXJzdE5hbWUiOiJVc3XDoXJpbyIsImxhc3ROYW1lIjoiVGVzdGUiLCJpYXQiOjE3NTY3NjgwNDAsImV4cCI6MTc1NzM3Mjg0MH0.8qd0UPsEYtH2Ww2xrriPV5lgj8P-xFfFNxruNoXstf0';

function setTokenAndReload() {
  console.log('üîë Definindo token no sessionStorage...');
  
  // Definir token
  sessionStorage.setItem('sanctum_access_token', validToken);
  
  // Definir dados b√°sicos do usu√°rio
  const userData = {
    id: '676a1234567890abcdef1234',
    email: 'teste@exemplo.com',
    firstName: 'Usu√°rio',
    lastName: 'Teste',
    accessToken: validToken
  };
  
  sessionStorage.setItem('user', JSON.stringify(userData));
  
  console.log('‚úÖ Token e dados do usu√°rio definidos!');
  console.log('üîÑ Recarregando p√°gina em 1 segundo...');
  
  setTimeout(() => {
    window.location.reload();
  }, 1000);
}

function testUpdateButton() {
  console.log('üß™ Testando funcionalidade do bot√£o de atualiza√ß√£o...');
  
  // Verificar se estamos na p√°gina de edi√ß√£o
  const isEditPage = window.location.pathname.includes('/edit/');
  if (!isEditPage) {
    console.log('‚ö†Ô∏è N√£o estamos na p√°gina de edi√ß√£o. Navegando...');
    window.location.href = '/dashboard/terrenos/edit/676a1234567890abcdef1234';
    return;
  }
  
  // Aguardar o formul√°rio carregar
  setTimeout(() => {
    // Procurar pelo bot√£o de atualiza√ß√£o
    const updateButton = document.querySelector('button[type="submit"]') || 
                        document.querySelector('button:contains("Atualizar")') ||
                        document.querySelector('[data-testid="update-button"]');
    
    if (updateButton) {
      console.log('üéØ Bot√£o de atualiza√ß√£o encontrado:', updateButton);
      console.log('üîç Estado inicial do bot√£o:');
      console.log('  - Desabilitado:', updateButton.disabled);
      console.log('  - Classes:', updateButton.className);
      
      // Testar altera√ß√£o em um campo
      const titleInput = document.querySelector('input[name="titulo"]') ||
                        document.querySelector('input[name="title"]') ||
                        document.querySelector('#titulo');
      
      if (titleInput) {
        console.log('üìù Campo de t√≠tulo encontrado. Testando altera√ß√£o...');
        
        // Simular altera√ß√£o
        titleInput.focus();
        titleInput.value = titleInput.value + ' - Editado';
        titleInput.dispatchEvent(new Event('input', { bubbles: true }));
        titleInput.dispatchEvent(new Event('change', { bubbles: true }));
        
        // Verificar estado do bot√£o ap√≥s altera√ß√£o
        setTimeout(() => {
          console.log('üîç Estado do bot√£o ap√≥s altera√ß√£o:');
          console.log('  - Desabilitado:', updateButton.disabled);
          console.log('  - Classes:', updateButton.className);
          
          if (!updateButton.disabled) {
            console.log('‚úÖ Sucesso! Bot√£o foi habilitado ap√≥s altera√ß√£o.');
          } else {
            console.log('‚ùå Bot√£o ainda est√° desabilitado. Verificar implementa√ß√£o.');
          }
        }, 500);
        
      } else {
        console.log('‚ùå Campo de t√≠tulo n√£o encontrado.');
      }
      
    } else {
      console.log('‚ùå Bot√£o de atualiza√ß√£o n√£o encontrado.');
    }
  }, 2000);
}

// Exportar fun√ß√µes
window.setTokenAndReload = setTokenAndReload;
window.testUpdateButton = testUpdateButton;

console.log('üöÄ Script de teste do bot√£o de atualiza√ß√£o carregado!');
console.log('üìã Fun√ß√µes dispon√≠veis:');
console.log('1. setTokenAndReload() - Definir token e recarregar');
console.log('2. testUpdateButton() - Testar funcionalidade do bot√£o');